pipeline{
    agent any
    environment {
    selectEnvToDeploy = "${selectEnvToDeploy}" 
    eks_cluster_name = "eksdemo-${selectEnvToDeploy}" 
    artifacts_dir = "${env.WORKSPACE}/artifacts"
    aws_region = "${params.aws_region}"
    job_root_dir="${env.WORKSPACE}"
    }
    stages{
       stage('Initialize workspace') {
         steps {
             
          // Make sure the directory is clean
            dir("${artifacts_dir}") {
                deleteDir()
            } 
            sh(script: "mkdir -p ${artifacts_dir}", label: 'Create artifacts directory')
          }
        }
        stage('git check out'){
            steps{
                git branch: 'master', url: 'https://github.com/MannemHaritha/springboot-maven-course-micro-svc.git'
            }
        }
        stage('Generate kubeconfig for the cluster') {
            steps {
                script {
                    env.KUBECONFIG = "${artifacts_dir}/${eks_cluster_name}-kubeconfig"
                    sh 'chmod +x ${WORKSPACE}/generate_kubeconfig_eks.sh'
                }
                sh(script: '${WORKSPACE}/generate_kubeconfig_eks.sh', label: 'Generate kubeconfig file')
            }
        }
        stage('Get the cluster details') {
            steps {
                script {
                    sh '''kubectl apply -f springboot-deployment-ecr.yml 
                          kubectl apply -f springboot-service.yaml
                          kubectl get all
                       '''
                }
            }
        }
    }


 post {
	    cleanup {
	          cleanWs(cleanWhenFailure: false)
	   }
}


}
